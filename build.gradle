plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'checkstyle'
    id 'org.flywaydb.flyway' version '7.7.2'
    id 'jacoco'
}

group = 'com.mgl'
version = '1.0.0'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'

	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.2'

    runtimeOnly 'org.postgresql:postgresql:42.2.19'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.github.benas:random-beans:3.7.0'
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/postgres'
    user = 'flyway_user'
    password = 'flyway-user-password'
    schemas = ['suppliersdb']
}

checkstyle {
    ignoreFailures = true
    maxWarnings = 0
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory.set(file("$buildDir/jacoco"))
}

tasks.register('checkstyle') {
    dependsOn tasks.checkstyleMain
    dependsOn tasks.checkstyleTest
}

tasks.register('release') {
    checkstyle.ignoreFailures = false;
    dependsOn tasks.checkstyle
    dependsOn tasks.test
    dependsOn tasks.build
}

test {
	useJUnitPlatform()
    finalizedBy jacocoTestReport
}

test.outputs.upToDateWhen { false }
jacocoTestReport.outputs.upToDateWhen { false }

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/models/**',
                    '**/exceptions/**',
                    '**/dto/**',
                    '**/dao/entities/**',
                    '**/spring/**',
                    '**/suppliersservice/SuppliersServiceApplication*'
            ])
        }))
    }
}